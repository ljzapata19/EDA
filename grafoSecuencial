import numpy as np

class GrafoSecuencial:
    __arreglo = []
    __vertices = []

    def __init__(self, vertices):
        v=len(vertices)
        self.__vertices = vertices
        self.__arreglo = np.zeros((v,v),dtype=int)

    def __str__(self):
        return f'{self.__arreglo}'

    def agregar_arista(self, i, j):
        i= self.__vertices.index(i)
        j= self.__vertices.index(j)
        self.__arreglo[i][j] = 1
        #self.__arreglo[j][i] = 1

    def ingreso_entradas(self, entradas):
        for e in entradas:
            self.agregar_arista(e[0],e[1])

    def adyacentes(self, u):
        adyacente= []
        j = self.__vertices.index(u)
        for f in self.__vertices:
            i= self.__vertices.index(f)
            if self.__arreglo[i][j] == 1:
                adyacente.append(f)
        adyacente.append(u)
        return adyacente
    
    def listaCamino(self, nodo):
        camino = []
        i = self.__vertices.index(nodo)
        for j, valor in enumerate(self.__arreglo[i]):
            if valor == 1:
                camino.append(self.__vertices[j])  # Cambi√© v[j] por self.__V[j]
        return camino

    def encontrar_camino(self, u, v, visitados, camino):
        visitados.add(u)
        camino.append(u)

        if u == v:
            return camino

        for nodo in self.listaCamino(u):
            if nodo not in visitados:
                resultado = self.encontrar_camino(nodo, v, visitados, camino)
                if resultado:
                    return resultado

        camino.pop()
        return None
    
    def conexo(self):
        conex=True 
        a=0
        while a<len(self.__vertices) and conex:
            i= 0
            while i< len(self.__vertices) and self.encontrar_camino(self.__vertices[a], self.__vertices[i], set(), []):
                i += 1
            if i< len(self.__vertices) and not self.encontrar_camino(self.__vertices[a], self.__vertices[i], set(), []):
                conex = False
            a += 1
        return conex

if __name__ == '__main__':
    v=[1,2,3,4,5]
    entradas = [(1,2),(1,4),(2,5),(3,5),(4,5)]
    g=GrafoSecuencial(v)
    g.ingreso_entradas(entradas)
    print(g)
    print(g.adyacentes(5))
    #print("Camino de 1 a 5:", g.camino(1, 5))
    #print(g.encontrar_camino(1, 5, set(), []))
    camino = g.encontrar_camino(1, 5, set(), [])
    if camino:
        print(f"Camino {camino}")
    else:
        print(f"No hay camino")
    
    print(g.conexo())
