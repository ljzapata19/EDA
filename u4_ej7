class Paciente:
    __nom=str
    __ap=str
    __p=int
    def __init__(self, nom, ap,p):
        self.__nom=nom
        self.__ap=ap
        self.__p=p
    def getPrioridad(self):
        return self.__p
    def __lt__(self, o):
        return self.__p < o.getPrioridad()
    def __eq__(self,o):
        return self.__p==o.getPrioridad()
class Nodo:
    __valor = object()
    __der = object()
    __izq = object()
    #agregar grado (cantidad de descendientes que tiene, tener en cuenta que como es bionario tiene orden 2, por lo tanto el grado maximo es 2)
    def __init__(self, dato, n, a):
        self.__valor = Paciente(n,a,dato)
        self.__der = None
        self.__izq = None
        
    def setDer(self, der):
        self.__der = der
    
    def setIzq(self, izq):
        self.__izq = izq
    
    def getDer(self):
        return self.__der
    
    def getIzq(self):
        return self.__izq
    
    def getValor(self):
        return self.__valor.getPrioridad()
    
    def setValor(self, X):
        self.__valor=X
    
class Arbol:
    __cabeza = None
    
    def __init__(self):
        self.__cabeza = None
    
    def getCabeza(self):
        return self.__cabeza

    def insertar(self, objeto,n,a):
        if self.__cabeza is None:
            nodo=Nodo(objeto,n,a)
            self.__cabeza=nodo
        else:
            self.insertarRecursion(self.__cabeza, objeto,n,a)

    def insertarRecursion(self, cab, objeto,n,a):
        if cab.getValor()==objeto:
            print("Elemento ya existente")
        else:
            if objeto < cab.getValor():
                if cab.getIzq() is None:
                    nodo=Nodo(objeto)
                    cab.setIzq(nodo)
                else:
                    self.insertarRecursion(cab.getIzq(), objeto)
            else:
                if objeto > cab.getValor():
                    if cab.getDer() is None:
                        nodo=Nodo(objeto)
                        cab.setDer(nodo)
                    else:
                        self.insertarRecursion(cab.getDer(), objeto)  
    def sup(self,valor):
        if self.__cabeza is None:
            print("El árbol está vacío. No se puede eliminar el elemento.")
        else:
            self.__cabeza = self.suprimirRecursion(self.__cabeza, valor)

    def suprimirRecursion(self, nodo, valor):
        if nodo is None:
            print(f"El elemento {valor} no existe en el árbol.")
        else:
            if valor < nodo.getValor():
                nodo.setIzq(self.suprimirRecursion(nodo.getIzq(), valor))
            elif valor > nodo.getValor():
                nodo.setDer(self.suprimirRecursion(nodo.getDer(), valor))
            else:
                if nodo.getIzq() is None and nodo.getDer() is None:
                    nodo = None
                elif nodo.getIzq() is None:
                    nodo = nodo.getDer()
                elif nodo.getDer() is None:
                    nodo = nodo.getIzq()
                else:
                    max_izquierdo = self.maximo(nodo.getIzq())
                    nodo.setValor(max_izquierdo.getValor())
                    nodo.setIzq(self.suprimirRecursion(nodo.getIzq(), max_izquierdo.getValor()))
        return nodo
    def maximo(self):
        nodo=self.__cabeza
        while nodo.getDer() is not None:
            aux=nodo
            nodo = nodo.getDer()
        self.sup(aux)

    def buscar(self, nodo, valor):
        if nodo is None:
            print("Error - Elemento Inexistente")
        else: 
            if nodo.getValor() == valor:
                print("Éxito - Elemento existente")
            elif valor < nodo.getValor():
                return self.buscar(nodo.getIzq(), valor)
            else:
                return self.buscar(nodo.getDer(), valor)
    
    
    def preOrden(self, nodo):
        if nodo is not None:
            self.preOrden(nodo.getIzq())
            print(nodo.getValor())
            self.preOrden(nodo.getDer())
if __name__== '__main__':
    a=Arbol()
    print(a.getCabeza())
    a.insertar('nom','ape',10)
    a.insertar('n','a',5)
    a.insertar('no','ap',15)
    a.preOrden(a.getCabeza())
    print('--')
    a.maximo()
    a.preOrden(a.getCabeza())














#OTRA FORMA

# -*- coding: utf-8 -*-
"""
Created on Fri Oct  6 12:22:34 2023

@author: ljzap
"""
class Paciente:
    __nom=str
    __ap=str
    __p=int
    def __init__(self, nom, ap,p):
        self.__nom=nom
        self.__ap=ap
        self.__p=p
        
    def getPrioridad(self):
        return self.__p
    
    def __lt__(self, o):
        return self.__p < o.getPrioridad()
    
    def __eq__(self,o):
        return self.__p==o.getPrioridad()
    
class nodoArbol:
    __dato=None
    __izquierdo=None
    __derecho=None
    
    def __init__(self, dato):
        self.__dato=dato
    
    def setIzquierdo(self,izq):
        self.__izquierdo=izq
    
    def getIzquierdo(self):
        return self.__izquierdo
        
    def setDerecho(self,der):
        self.__derecho=der
    
    def getDerecho(self):
        return self.__derecho
    
    def getDato(self):
        return self.__dato
    
    def setDato(self,dato):
        self.__dato=dato
    
    def __str__(self):
        return f'{self.__izquierdo.getDato()} <-- {self.__dato} -->{self.__derecho.getDato()}'
    
class Arbol_Binario:
    __raiz=None
    
    def __init__(self):
        self.__raiz=None
    
    def getRaiz(self):
        return self.__raiz
    
    def arbol_vacio(self):
        return self.__raiz is None
    
    def insertar(self, n,a,p):
        dato = Paciente(n, a, p)        
        self.__raiz = self.insertar_nodo(self.__raiz, dato)
    
    def insertar_nodo(self, sub_arbol, dato):
        if sub_arbol is None:
            nodo = nodoArbol(dato)
            sub_arbol = nodo
        else:
            if dato < sub_arbol.getDato():
                sub_arbol.setIzquierdo(self.insertar_nodo(sub_arbol.getIzquierdo(), dato))
            elif dato > sub_arbol.getDato():
                sub_arbol.setDerecho(self.insertar_nodo(sub_arbol.getDerecho(), dato))
            else: 
                print('El dato ingresado ya exite en el arbol.')
        return sub_arbol.getDato().getPrioridad()
    
    def buscar(self, dato):
        return self.buscar_nodo(dato) is not None
    
    def buscar_nodo(self, dato):
        actual = None
        if not self.arbol_vacio():
            actual = self.__raiz
            while actual is not None and dato != actual.getDato():
                if dato < actual.getDato():
                    actual = actual.getIzquierdo()
                elif dato > actual.getDato():
                    actual = actual.getDerecho()
        return actual
    
    def suprimir(self, dato):
        elemento = 'No se encuentra el dato'
        posicion = self.buscar_nodo(dato)
        if posicion is not None:
            elemento = posicion.getDato()
            self.__raiz = self.eliminar_nodo(self.__raiz, dato)
        return elemento
    
    def eliminar_nodo(self, sub_arbol, dato):
        if sub_arbol is None:
            return None
        elif dato < sub_arbol.getDato():
            sub_arbol.setIzquierdo(self.eliminar_nodo(sub_arbol.getIzquierdo(), dato))
        elif dato > sub_arbol.getDato():
            sub_arbol.setDerecho(self.eliminar_nodo(sub_arbol.getDerecho(), dato))
        else:
            nodo_eliminar = sub_arbol
            if nodo_eliminar.getDerecho() is None:
                sub_arbol = nodo_eliminar.getIzquierdo()
            elif nodo_eliminar.getIzquierdo() is None:
                sub_arbol = nodo_eliminar.getDerecho()
            else:
                max_izquierdo = self.maximo(nodo_eliminar.getIzquierdo())
                nodo_eliminar.setDato(max_izquierdo.getDato())
                nodo_eliminar.setIzquierdo(self.eliminar_nodo(nodo_eliminar.getIzquierdo(), max_izquierdo.getDato()))
        return sub_arbol
    
    def maximo(self, nodo):
        while nodo.getDerecho() is not None:
            nodo = nodo.getDerecho()
        return nodo
    
    def preOrden(self, nodo):
        if nodo is not None:
            print(nodo.getDato())
            self.preOrden(nodo.getIzquierdo())
            self.preOrden(nodo.getDerecho())

if __name__== '__main__':
    a=Arbol_Binario()
    print(a.getRaiz())
    a.insertar('nom','ape',10)
    a.insertar('n','a',5)
    a.insertar('no','ap',15)
    a.preOrden(a.getRaiz())
    print('--')
    a.maximo()
    a.preOrden(a.getRaiz())
