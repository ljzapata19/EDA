class Sudoku:
    __tablero = None
    
    def __init__(self, tablero):
        self.__tablero = tablero
    
    def encontrarCeldaVacia(self):
        for i in range(4):
            for j in range(4):
                if self.__tablero[i][j] == 0:
                    return i,j
        return None
    
    def validarFila(self, fila, nro):
        #verifica si el nro se encuentra en la fila
        if nro in self.__tablero[fila]:
             return False
        else: 
            return True
        
    def validarColumna(self, columna, nro):
        #verifica si el nro se encuentra en la columna
        for i in range(4):
            if nro == self.__tablero[i][columna]:
                return False
        return True
    
    def validarCuadrado(self,fila, columna, nro):
        #encuentra posicion inicial del cuadro
        inicio_cuadro_fila = (fila // 2) * 2
        inicio_cuadro_columna = (columna // 2) * 2
        #verifica si el nro se encuentra en el cuadrado
        i = inicio_cuadro_fila
        while i < inicio_cuadro_fila+2:
            j= inicio_cuadro_columna
            while j < inicio_cuadro_columna+2:
                if nro == self.__tablero[i][j]:
                    return False
                j += 1
            i += 1
        return True
    
    def nroValido(self, fila, columna, nro):
        if self.validarFila(fila, nro) is False or self.validarColumna(columna, nro) is False or self.validarCuadrado(fila, columna, nro) is False:
            return False
        else:
            return True
        
    def encontrarCeldaMenosOpciones(self):
        min_opciones = 5  # Inicializar con infinito para encontrar el mínimo
        celda_menos_opciones = None

        for i in range(4):
            for j in range(4):
                #print('i,j', i, j)
                if self.__tablero[i][j] == 0:
                    opciones_actuales = self.contarOpciones(i, j)
                    #print('opciones para',i,j,': ', len(opciones_actuales))
                    #print('min_opciones', min_opciones)
                    if len(opciones_actuales) < min_opciones:
                        min_opciones = len(opciones_actuales)
                        celda_menos_opciones = (i, j, opciones_actuales)

        return celda_menos_opciones

    def contarOpciones(self, fila, columna):
        opciones = []
        for numero in range(1, 5):
            if self.nroValido(fila, columna, numero):
                opciones.append(numero)
        return opciones
    
    
    def resolverSudoku(self):
        celda_menos_opciones = self.encontrarCeldaMenosOpciones()
    
        if not celda_menos_opciones:
            # No hay celdas vacías, el Sudoku está resuelto
            return True
    
        fila, columna, opciones_validas = celda_menos_opciones
    
        for numero in opciones_validas: 
            #print(1)
            # Asignar el número  válido
            self.__tablero[fila][columna] = numero

            # Intentar resolver el resto del Sudoku
            if self.resolverSudoku():
                return True

            # Si la asignación no lleva a una solución válida, retroceder (backtrack)
            self.__tablero[fila][columna] = 0
    
        # No se encontró ningún número válido, retroceder
        return False
                
    def imprimirSudoku(self):
        for i in range(4):
            for j in range(4):
                print(self.__tablero[i][j], end=' ')
            print()
            
    
            
if __name__ == '__main__':
    tablero = [
        [1,0,0,0],
        [0,0,0,2],
        [0,0,0,0],
        [0,0,0,4]
        ]
    print('Sudoku a resolver')
    sudoku = Sudoku(tablero)
    sudoku.imprimirSudoku()

    solucion = sudoku.resolverSudoku()

    if solucion :
        print('Solución Sudoku')
        sudoku.imprimirSudoku()
    else:
        print('Sudoku invalido')
   
    
    

    
