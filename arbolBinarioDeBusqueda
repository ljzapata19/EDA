
class Nodo:
    __valor = int()
    __der = object()
    __izq = object()
    #agregar grado (cantidad de descendientes que tiene, tener en cuenta que como es bionario tiene orden 2, por lo tanto el grado maximo es 2)
    def __init__(self, dato):
        self.__valor = dato
        self.__der = None
        self.__izq = None
        
    def setDer(self, der):
        self.__der = der
    
    def setIzq(self, izq):
        self.__izq = izq
    
    def getDer(self):
        return self.__der
    
    def getIzq(self):
        return self.__izq
    
    def getValor(self):
        return self.__valor
    
    def setValor(self, X):
        self.__valor=X
    
class Arbol:
    __cabeza = None
    
    def __init__(self):
        self.__cabeza = None
    
    def getCabeza(self):
        return self.__cabeza

    def insertar(self, objeto):
        if self.__cabeza is None:
            nodo=Nodo(objeto)
            self.__cabeza=nodo
        else:
            self.insertarRecursion(self.__cabeza, objeto)

    def insertarRecursion(self, cab, objeto):
        if cab.getValor()==objeto:
            print("Elemento ya existente")
        else:
            if objeto < cab.getValor():
                if cab.getIzq() is None:
                    nodo=Nodo(objeto)
                    cab.setIzq(nodo)
                else:
                    self.insertarRecursion(cab.getIzq(), objeto)
            else:
                if objeto > cab.getValor():
                    if cab.getDer() is None:
                        nodo=Nodo(objeto)
                        cab.setDer(nodo)
                    else:
                        self.insertarRecursion(cab.getDer(), objeto)  
    def suprimir(self, valor):
        if self.__cabeza is None:
            print("El árbol está vacío. No se puede eliminar el elemento.")
        else:
            self.__cabeza = self.suprimirRecursion(self.__cabeza, valor)

    def suprimirRecursion(self, nodo, valor):
        if nodo is None:
            print(f"El elemento {valor} no existe en el árbol.")
        else:
            if valor < nodo.getValor():
                nodo.setIzq(self.suprimirRecursion(nodo.getIzq(), valor))
            elif valor > nodo.getValor():
                nodo.setDer(self.suprimirRecursion(nodo.getDer(), valor))
            else:
                if nodo.getIzq() is None and nodo.getDer() is None:
                    nodo = None
                elif nodo.getIzq() is None:
                    nodo = nodo.getDer()
                elif nodo.getDer() is None:
                    nodo = nodo.getIzq()
                else:
                    max_izquierdo = self.maximo(nodo.getIzq())
                    nodo.setValor(max_izquierdo.getValor())
                    nodo.setIzq(self.suprimirRecursion(nodo.getIzq(), max_izquierdo.getValor()))
        return nodo
    def maximo(self, nodo):
        while nodo.getDer() is not None:
            nodo = nodo.getDer()
        return nodo
    def buscar(self, nodo, valor):
        if nodo is None:
            print("Error - Elemento Inexistente")
        else: 
            if nodo.getValor() == valor:
                print("Éxito - Elemento existente")
            elif valor < nodo.getValor():
                return self.buscar(nodo.getIzq(), valor)
            else:
                return self.buscar(nodo.getDer(), valor)
    
    def Hoja(self, nodo, valor):
        if nodo is None:
            return False
        elif nodo.getValor() == valor and nodo.getIzq() is None and nodo.getDer() is None:
            return True
        else:
            return self.Hoja(nodo.getIzq(), valor) or self.Hoja(nodo.getDer(), valor)
    
    def Nivel(self, nodo, valor, nivel_actual):
        if nodo is None:
            return -1  # Valor no encontrado
        if nodo.getValor() == valor:
            return nivel_actual
        nivel_izq = self.Nivel(nodo.getIzq(), valor, nivel_actual + 1)
        if nivel_izq != -1:
            return nivel_izq
        nivel_der = self.Nivel(nodo.getDer(), valor, nivel_actual + 1)
        return nivel_der
    
    def Hijo(self, nodo, padre_valor, hijo_valor):
        if nodo is None:
            return False
        if nodo.getValor() == padre_valor:
            if nodo.getIzq() and nodo.getIzq().getValor() == hijo_valor:
                return True
            if nodo.getDer() and nodo.getDer().getValor() == hijo_valor:
                return True
        return self.Hijo(nodo.getIzq(), padre_valor, hijo_valor) or self.Hijo(nodo.getDer(), padre_valor, hijo_valor)

    def Padre(self, nodo, padre, hijo_valor):
        if nodo is None:
            return None  # Valor no encontrado
        if nodo.getValor() == hijo_valor:
            return padre.getValor() if padre else None
        izquierda = self.Padre(nodo.getIzq(), nodo, hijo_valor)
        if izquierda:
            return izquierda
        derecha = self.Padre(nodo.getDer(), nodo, hijo_valor)
        return derecha
    
    def buscar_nodo_y_padre(self,nodo,hijo,padre=None):
        if nodo is None:
            return None
        if nodo.getValor()==hijo :
            return padre
        elif hijo < nodo.getValor():
            return self.buscar_nodo_y_padre(nodo.getIzq(), hijo, padre)
        else:
            return self.buscar_nodo_y_padre(nodo.getDer(), hijo, padre)


    def Padre_Hermano(self, cab, hijo):
        nodo, padre = self.buscar_nodo_y_padre(cab,hijo)
        if nodo is None:
            return None,None
        if padre is None:
            hermano=None
        elif nodo == padre.getIzq():
            hermano=padre.getDer()
        else:
            hermano=padre.getIzq()
        return padre,hermano
        


    def Camino(self, inicio_valor, final_valor):
        camino = self.encontrarCamino(self.__cabeza, [], inicio_valor, final_valor)
        if camino:
            return camino

    def encontrarCamino(self, nodo, camino_actual, inicio_valor, final_valor):
        if nodo is None:
            return None
        camino_actual.append(nodo.getValor())
        if nodo.getValor() == final_valor:
            return camino_actual
        izquierda = self.encontrarCamino(nodo.getIzq(), camino_actual.copy(), inicio_valor, final_valor)
        if izquierda:
            return izquierda
        derecha = self.encontrarCamino(nodo.getDer(), camino_actual.copy(), inicio_valor, final_valor)
        return derecha

    def Altura(self, nodo):
        if nodo is None:
            return 0
        izquierda = self.Altura(nodo.getIzq())
        derecha = self.Altura(nodo.getDer())
        return max(izquierda, derecha) + 1
    
    
    def preOrden(self, nodo):
        if nodo is not None:
            self.preOrden(nodo.getIzq())
            print(nodo.getValor())
            self.preOrden(nodo.getDer())
    


    

if __name__== '__main__':
    a=Arbol()
    print(a.getCabeza())
    a.insertar(12)
    a.insertar(5)
    a.insertar(15)
    a.insertar(3)
    a.insertar(20)
    a.insertar(9)
    a.preOrden(a.getCabeza())
    print('--')
    a.suprimir(1)
    a.preOrden(a.getCabeza())
    a.buscar(a.getCabeza(),5)
    print(f'Hoja:  {a.Hoja(a.getCabeza(),20)}')
    print(f'Nivel:  {a.Nivel(a.getCabeza(),15,1)}')
    print(f'Hijo:  {a.Hijo(a.getCabeza(),12,15)}')
    print(f'Padre:  {a.Padre(a.getCabeza(),20,3)}')
    print(f'Camino:  {a.Camino(5,20)}')
    print(f'Altura:  {a.Altura(a.getCabeza())}')
    padre,hermano = a.Padre_Hermano(a.getCabeza(),5)
