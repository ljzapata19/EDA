class Nodo:
    __valor = int()
    __der = object()
    __izq = object()
    def __init__(self, dato):
        self.__valor = dato
        self.__der = None
        self.__izq = None
        self.__grado = 0
        
    def setDer(self, der):
        self.__der = der
    
    def setIzq(self, izq):
        self.__izq = izq
    
    def getDer(self):
        return self.__der
    
    def getIzq(self):
        return self.__izq
    
    def getValor(self):
        return self.__valor
        
    def setValor(self, X):
        self.__valor=X
    
    def getGrado(self):
        if self.__izq != None and self.__der != None:
            grado = 2
        elif self.__izq is None and self.__der is None:
            grado = 0
        else:
            grado=1
        return grado
    
class ArbolBinarioDeBusqueda:
    __raiz = None
    def __init__(self):
        self.__raiz= None
    
    def getRaiz(self):
        return self.__raiz
    
    def insertar(self, dato):
        if self.__raiz is None:
            self.__raiz = Nodo(dato)
        else: 
            self.insertar_recursivo(self.__raiz, dato)
    
    def insertar_recursivo(self, nodo, dato):
        if nodo is None:
            nodo = Nodo(dato)
        elif dato == nodo.getValor():
            print(f'El elemento {dato} ya existe.')
        elif dato < nodo.getValor():
            nodo.setIzq(self.insertar_recursivo(nodo.getIzq(), dato))
        else:
            nodo.setDer(self.insertar_recursivo(nodo.getDer(), dato))
        return nodo
    
    def maximo(self, nodo):
        while nodo.getDer() is not None:
            nodo = nodo.getDer()
        return nodo
    
    def suprimir(self, dato):
        if self.__raiz is None:     #el arbol no estÃ¡ vacio
            print('el arbol esta vacio')
        else:
            self.__raiz = self.suprimir_recursivo(self.__raiz, dato)
    
    def suprimir_recursivo(self, nodo, dato):
        if nodo is None:
            print('el elemento no existe')
        elif dato < nodo.getValor():
            nodo.setIzq(self.suprimir_recursivo(nodo.getIzq(), dato))
        elif dato > nodo.getValor():
            nodo.setDer(self.suprimir_recursivo(nodo.getDer(), dato)) 
        elif dato == nodo.getValor():
            grado = nodo.getGrado()
            if grado == 0:
                nodo=None
            elif grado == 1:
                nodo = nodo.getIzq() or nodo.getDer()
            elif grado == 2:
                maximo = self.maximo(nodo.getIzq())
                nodo.setValor(maximo.getValor())
                nodo.setIzq(self.suprimir_recursivo(nodo.getIzq(),maximo.getValor()))
        return nodo
    
    def hijo(self, nodo, hijo, padre):
        if nodo is None:
            return False
        else: 
            if nodo.getValor() == padre:
                if nodo.getIzq() and nodo.getIzq().getValor() == hijo:
                    return True
                elif nodo.getDer() and nodo.getDer().getValor() == hijo:
                    return True
                else:
                    return False
            elif padre < nodo.getValor():
                return self.hijo(nodo.getIzq(), hijo, padre)
            elif padre > nodo.getValor():
                return self.hijo(nodo.getDer(), hijo, padre)
        
    def padre(self, nodo, padre, hijo):
        return self.hijo(nodo, hijo, padre)
    
    def nivel(self, nodo, dato, n=1):
        if nodo is None:
            return f'{dato} No se encuentra en el arbol'
        else:
            if dato == nodo.getValor():
                return n
            elif dato < nodo.getValor():
                return self.nivel(nodo.getIzq(), dato, n+1)
            elif dato > nodo.getValor():
                return self.nivel(nodo.getDer(), dato, n+1)
    
    def hoja(self, nodo, dato):
        if nodo is None:
            return 'arbol vacio'
        else:
            hoja = self.buscar(nodo, dato)
            if hoja and hoja.getGrado() == 0:
                return True
            else:
                return False
    def altura(self, nodo):
        if nodo is None:
            return 0
        else:
            izquierda = self.altura(nodo.getIzq())
            derecha = self.altura(nodo.getDer())
            return max(izquierda, derecha) + 1
        
    def camino(self, nodo, inicio, final):
        if nodo is None:
            return 'arbol vacio'
        else:
            inicio = self.buscar(nodo, inicio)
            if inicio:
                return self.encontrar_camino(inicio, final)          
            
    def encontrar_camino(self, nodo, final, recorrido=[]):
        if nodo is None:
            return 'no hay camino'
        else:
            if final == nodo.getValor():
                recorrido.append(final)
                return recorrido                
            elif final < nodo.getValor():
                recorrido.append(nodo.getValor())
                return self.encontrar_camino(nodo.getIzq(), final, recorrido)
            elif final > nodo.getValor():
                recorrido.append(nodo.getValor())
                return self.encontrar_camino(nodo.getDer(), final, recorrido)

    def inOrden(self, nodo):
        if nodo is not None:            
            self.inOrden(nodo.getIzq())
            print(nodo.getValor())
            self.inOrden(nodo.getDer())
            
    def preOrden(self, nodo):
        if nodo is not None:
            print(nodo.getValor())
            self.preOrden(nodo.getIzq())
            self.preOrden(nodo.getDer())
    
    def postOrden(self, nodo):
        if nodo is not None:            
            self.postOrden(nodo.getIzq())            
            self.postOrden(nodo.getDer())
            print(nodo.getValor())
            
    def buscar(self,nodo, dato):
        if nodo is None:
            return False
        else: 
            if nodo.getValor() == dato:
                return nodo
            elif dato < nodo.getValor():
                return self.buscar(nodo.getIzq(), dato)
            else:
                return self.buscar(nodo.getDer(), dato)
    
    def frontera(self, nodo):
        if nodo is not None:
            self.frontera(nodo.getIzq())
            if nodo.getGrado() == 0:
                print(nodo.getValor())
            self.frontera(nodo.getDer())
            
if __name__== '__main__':
    a=ArbolBinarioDeBusqueda()
    print(a.getRaiz())
    a.insertar(12)
    a.insertar(5)
    a.insertar(15)
    a.insertar(3)
    a.insertar(20)
    a.insertar(9)
    a.preOrden(a.getRaiz())
    print('Suprimir')
    a.suprimir_recursivo(a.getRaiz(),16)
    a.preOrden(a.getRaiz())
    print('---')
    print(a.getRaiz().getValor())
    print('---')
    buscado=a.buscar(a.getRaiz(),9)
    print(buscado.getValor())
    print(f'Hijo:  {a.hijo(a.getRaiz(),5,12)}')
    print(f'Padre:  {a.padre(a.getRaiz(),12,5)}')
    print(f'Nivel: {a.nivel(a.getRaiz(),9)}')
    print(f'Hoja: {a.hoja(a.getRaiz(),0)}')
    print(f'Altura: {a.altura(a.getRaiz())}')
    print(f'Camino: {a.camino(a.getRaiz(), 12, 3)}')
    a.frontera(a.getRaiz())
